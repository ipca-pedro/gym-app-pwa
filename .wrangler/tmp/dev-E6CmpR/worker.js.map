{
  "version": 3,
  "sources": ["../bundle-TSXZCx/checked-fetch.js", "../../../api/worker.js", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-TSXZCx/middleware-insertion-facade.js", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-TSXZCx/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\Utilizador\\Desktop\\gym-app\\.wrangler\\tmp\\dev-E6CmpR",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export default {\n  async fetch(request, env) {\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    };\n\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    const url = new URL(request.url);\n    \n    // Generate workout\n    if (url.pathname === '/api/workout' && request.method === 'POST') {\n      try {\n        const { userId, profile } = await request.json();\n        \n        // Get user history for personalization\n        const userHistory = await env.GYM_DB.get(`user:${userId}:history`) || '[]';\n        const history = JSON.parse(userHistory);\n        \n        // Use custom prompt if provided (from dashboard), otherwise use default\n        const prompt = request.prompt || `Crie um treino personalizado para:\n- Idade: ${profile.age} anos\n- Peso: ${profile.weight}kg, Altura: ${profile.height}cm\n- N\u00EDvel: ${profile.level}\n- Objetivo: ${profile.goal}\n- Tipo preferido: ${profile.workoutType || 'misto'}\n- Local: ${profile.trainingLocation || 'academia'}\n- Dura\u00E7\u00E3o: ${profile.sessionDuration || '45-60'} minutos\n- Disponibilidade: ${profile.weeklyAvailability || '3-4 dias'}\n- Hor\u00E1rio: ${profile.preferredTime || 'flex\u00EDvel'}\n- Limita\u00E7\u00F5es: ${profile.limitations || 'Nenhuma'}\n\nHist\u00F3rico de feedback: ${history.slice(-3).map(h => `Dificuldade: ${h.difficulty}/5, Coment\u00E1rios: ${h.comments}`).join('; ')}\n\nRetorne um JSON com: {\"name\": \"Nome do Treino\", \"duration\": \"${profile.sessionDuration || '45'} min\", \"exercises\": [{\"name\": \"Exerc\u00EDcio\", \"sets\": 3, \"reps\": \"12-15\", \"description\": \"Como fazer\", \"equipment\": \"equipamento\"}]}`;\n\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${env.GEMINI_API_KEY}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            contents: [{\n              parts: [{ text: prompt }]\n            }]\n          })\n        });\n\n        const data = await response.json();\n        let workout;\n        \n        try {\n          const content = data.candidates[0].content.parts[0].text;\n          workout = JSON.parse(content);\n          workout.id = Date.now().toString();\n          workout.date = new Date().toISOString();\n        } catch {\n          // Fallback workout\n          workout = {\n            id: Date.now().toString(),\n            name: \"Treino Personalizado\",\n            duration: \"45 min\",\n            date: new Date().toISOString(),\n            exercises: [\n              { name: \"Agachamento\", sets: 3, reps: \"12-15\", description: \"P\u00E9s na largura dos ombros, des\u00E7a at\u00E9 90\u00B0\" },\n              { name: \"Flex\u00E3o\", sets: 3, reps: \"8-12\", description: \"Mantenha o corpo reto, des\u00E7a at\u00E9 o peito tocar o ch\u00E3o\" },\n              { name: \"Prancha\", sets: 3, reps: \"30-60s\", description: \"Corpo reto, apoie nos antebra\u00E7os\" }\n            ]\n          };\n        }\n\n        // Save current workout\n        await env.GYM_DB.put(`user:${userId}:current_workout`, JSON.stringify(workout));\n\n        return new Response(JSON.stringify({ workout }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({ error: 'Erro ao gerar treino' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // Submit feedback\n    if (url.pathname === '/api/feedback' && request.method === 'POST') {\n      try {\n        const feedback = await request.json();\n        \n        // Get existing history\n        const userHistory = await env.GYM_DB.get(`user:${feedback.userId}:history`) || '[]';\n        const history = JSON.parse(userHistory);\n        \n        // Add new feedback\n        history.push({\n          ...feedback,\n          date: new Date().toISOString()\n        });\n        \n        // Keep only last 10 feedbacks\n        const recentHistory = history.slice(-10);\n        \n        // Save updated history\n        await env.GYM_DB.put(`user:${feedback.userId}:history`, JSON.stringify(recentHistory));\n        \n        // Clear current workout\n        await env.GYM_DB.delete(`user:${feedback.userId}:current_workout`);\n\n        return new Response(JSON.stringify({ success: true }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({ error: 'Erro ao salvar feedback' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // Get user's current workout\n    if (url.pathname.match(/\\/api\\/user\\/(.+)\\/workout/) && request.method === 'GET') {\n      try {\n        const userId = url.pathname.split('/')[3];\n        const workoutData = await env.GYM_DB.get(`user:${userId}:current_workout`);\n        \n        if (workoutData) {\n          const workout = JSON.parse(workoutData);\n          return new Response(JSON.stringify({ workout }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        } else {\n          return new Response(JSON.stringify({ workout: null }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n      } catch (error) {\n        return new Response(JSON.stringify({ error: 'Erro ao buscar treino' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // AI Chat endpoint\n    if (url.pathname === '/api/chat' && request.method === 'POST') {\n      try {\n        const { message } = await request.json();\n        \n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${env.GEMINI_API_KEY}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            contents: [{\n              parts: [{ text: message }]\n            }]\n          })\n        });\n\n        const data = await response.json();\n        const aiResponse = data.candidates[0].content.parts[0].text;\n\n        return new Response(JSON.stringify({ response: aiResponse }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({ \n          response: 'Desculpe, n\u00E3o consegui processar sua pergunta no momento.' \n        }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    return new Response('Not found', { status: 404 });\n  }\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\Utilizador\\\\Desktop\\\\gym-app\\\\api\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Utilizador\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Utilizador\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\Utilizador\\\\Desktop\\\\gym-app\\\\api\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\Utilizador\\\\Desktop\\\\gym-app\\\\.wrangler\\\\tmp\\\\bundle-TSXZCx\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Utilizador\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\Utilizador\\\\Desktop\\\\gym-app\\\\.wrangler\\\\tmp\\\\bundle-TSXZCx\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\Utilizador\\\\Desktop\\\\gym-app\\\\.wrangler\\\\tmp\\\\bundle-TSXZCx\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,IAAM,OAAO,oBAAI,IAAI;AAErB,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACH;AACH,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS,CAAC;AAAA;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;AAnBS;AAqBT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,UAAM,CAAC,SAAS,IAAI,IAAI;AACxB,aAAS,SAAS,IAAI;AACtB,WAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,EAC/C;AACD,CAAC;;;AC7BD,IAAO,iBAAQ;AAAA,EACb,MAAM,MAAM,SAAS,KAAK;AACxB,UAAM,cAAc;AAAA,MAClB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AAEA,QAAI,QAAQ,WAAW,WAAW;AAChC,aAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,CAAC;AAAA,IACpD;AAEA,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAG/B,QAAI,IAAI,aAAa,kBAAkB,QAAQ,WAAW,QAAQ;AAChE,UAAI;AACF,cAAM,EAAE,QAAQ,QAAQ,IAAI,MAAM,QAAQ,KAAK;AAG/C,cAAM,cAAc,MAAM,IAAI,OAAO,IAAI,QAAQ,MAAM,UAAU,KAAK;AACtE,cAAM,UAAU,KAAK,MAAM,WAAW;AAGtC,cAAM,SAAS,QAAQ,UAAU;AAAA,WAC9B,QAAQ,GAAG;AAAA,UACZ,QAAQ,MAAM,eAAe,QAAQ,MAAM;AAAA,cAC1C,QAAQ,KAAK;AAAA,cACV,QAAQ,IAAI;AAAA,oBACN,QAAQ,eAAe,OAAO;AAAA,WACvC,QAAQ,oBAAoB,UAAU;AAAA,mBACpC,QAAQ,mBAAmB,OAAO;AAAA,qBAC1B,QAAQ,sBAAsB,UAAU;AAAA,gBAChD,QAAQ,iBAAiB,aAAU;AAAA,sBAChC,QAAQ,eAAe,SAAS;AAAA;AAAA,4BAEvB,QAAQ,MAAM,EAAE,EAAE,IAAI,OAAK,gBAAgB,EAAE,UAAU,uBAAoB,EAAE,QAAQ,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA,+DAE7D,QAAQ,mBAAmB,IAAI;AAEtF,cAAM,WAAW,MAAM,MAAM,uGAAuG,IAAI,cAAc,IAAI;AAAA,UACxJ,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,gBAAgB;AAAA,UAClB;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACnB,UAAU,CAAC;AAAA,cACT,OAAO,CAAC,EAAE,MAAM,OAAO,CAAC;AAAA,YAC1B,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC;AAED,cAAM,OAAO,MAAM,SAAS,KAAK;AACjC,YAAI;AAEJ,YAAI;AACF,gBAAM,UAAU,KAAK,WAAW,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE;AACpD,oBAAU,KAAK,MAAM,OAAO;AAC5B,kBAAQ,KAAK,KAAK,IAAI,EAAE,SAAS;AACjC,kBAAQ,QAAO,oBAAI,KAAK,GAAE,YAAY;AAAA,QACxC,QAAQ;AAEN,oBAAU;AAAA,YACR,IAAI,KAAK,IAAI,EAAE,SAAS;AAAA,YACxB,MAAM;AAAA,YACN,UAAU;AAAA,YACV,OAAM,oBAAI,KAAK,GAAE,YAAY;AAAA,YAC7B,WAAW;AAAA,cACT,EAAE,MAAM,eAAe,MAAM,GAAG,MAAM,SAAS,aAAa,uDAA2C;AAAA,cACvG,EAAE,MAAM,aAAU,MAAM,GAAG,MAAM,QAAQ,aAAa,iEAAwD;AAAA,cAC9G,EAAE,MAAM,WAAW,MAAM,GAAG,MAAM,UAAU,aAAa,sCAAmC;AAAA,YAC9F;AAAA,UACF;AAAA,QACF;AAGA,cAAM,IAAI,OAAO,IAAI,QAAQ,MAAM,oBAAoB,KAAK,UAAU,OAAO,CAAC;AAE9E,eAAO,IAAI,SAAS,KAAK,UAAU,EAAE,QAAQ,CAAC,GAAG;AAAA,UAC/C,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,uBAAuB,CAAC,GAAG;AAAA,UACrE,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,IAAI,aAAa,mBAAmB,QAAQ,WAAW,QAAQ;AACjE,UAAI;AACF,cAAM,WAAW,MAAM,QAAQ,KAAK;AAGpC,cAAM,cAAc,MAAM,IAAI,OAAO,IAAI,QAAQ,SAAS,MAAM,UAAU,KAAK;AAC/E,cAAM,UAAU,KAAK,MAAM,WAAW;AAGtC,gBAAQ,KAAK;AAAA,UACX,GAAG;AAAA,UACH,OAAM,oBAAI,KAAK,GAAE,YAAY;AAAA,QAC/B,CAAC;AAGD,cAAM,gBAAgB,QAAQ,MAAM,GAAG;AAGvC,cAAM,IAAI,OAAO,IAAI,QAAQ,SAAS,MAAM,YAAY,KAAK,UAAU,aAAa,CAAC;AAGrF,cAAM,IAAI,OAAO,OAAO,QAAQ,SAAS,MAAM,kBAAkB;AAEjE,eAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,KAAK,CAAC,GAAG;AAAA,UACrD,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,0BAA0B,CAAC,GAAG;AAAA,UACxE,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,IAAI,SAAS,MAAM,4BAA4B,KAAK,QAAQ,WAAW,OAAO;AAChF,UAAI;AACF,cAAM,SAAS,IAAI,SAAS,MAAM,GAAG,EAAE,CAAC;AACxC,cAAM,cAAc,MAAM,IAAI,OAAO,IAAI,QAAQ,MAAM,kBAAkB;AAEzE,YAAI,aAAa;AACf,gBAAM,UAAU,KAAK,MAAM,WAAW;AACtC,iBAAO,IAAI,SAAS,KAAK,UAAU,EAAE,QAAQ,CAAC,GAAG;AAAA,YAC/C,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,UAChE,CAAC;AAAA,QACH,OAAO;AACL,iBAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,KAAK,CAAC,GAAG;AAAA,YACrD,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,UAChE,CAAC;AAAA,QACH;AAAA,MACF,SAAS,OAAO;AACd,eAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC,GAAG;AAAA,UACtE,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,IAAI,aAAa,eAAe,QAAQ,WAAW,QAAQ;AAC7D,UAAI;AACF,cAAM,EAAE,QAAQ,IAAI,MAAM,QAAQ,KAAK;AAEvC,cAAM,WAAW,MAAM,MAAM,uGAAuG,IAAI,cAAc,IAAI;AAAA,UACxJ,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,gBAAgB;AAAA,UAClB;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACnB,UAAU,CAAC;AAAA,cACT,OAAO,CAAC,EAAE,MAAM,QAAQ,CAAC;AAAA,YAC3B,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC;AAED,cAAM,OAAO,MAAM,SAAS,KAAK;AACjC,cAAM,aAAa,KAAK,WAAW,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE;AAEvD,eAAO,IAAI,SAAS,KAAK,UAAU,EAAE,UAAU,WAAW,CAAC,GAAG;AAAA,UAC5D,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,IAAI,SAAS,KAAK,UAAU;AAAA,UACjC,UAAU;AAAA,QACZ,CAAC,GAAG;AAAA,UACF,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EAClD;AACF;;;ACrLA,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
